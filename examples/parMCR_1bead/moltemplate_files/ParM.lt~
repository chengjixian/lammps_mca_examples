# All of the "molecules" in this simple model are identical and contain 1 atom.
# What will distinguish them from eachother are the rules that we will
# define which govern how interactions between them form and break bonds
# and change atom types.


TF {                         #<-- ParM+ATP ("F" <=> Free)
  # AtomID MolID AtomType  x   y   z
  write("Data Atoms") {
    $atom  $mol  @atom    0.0 0.0 0.0
  }
  write_once("Data Masses") {
    @atom 1.0
  }
  #       AtomType AtomType style epsilon sigma rcutoff
  write_once("In Settings") {
    pair_coeff @atom @atom  lj/cut  1.0   6.24  7.0 
  }
  # Note: 7.0 = filament width (nm)
}

TB {                          #<-- ParM+ATP ("B" <=> bound)
  # AtomID MolID AtomType  x   y   z
  write("Data Atoms") {
    $atom  $mol  @atom    0.0 0.0 0.0
  }
  write_once("Data Masses") {
    @atom 1.0
  }
  #       AtomType AtomType style epsilon sigma rcutoff
  write_once("In Settings") {
    pair_coeff @atom @atom  lj/cut  1.0   6.24  7.0 
  }
  # Note: 7.0 = filament width (nm)
}

TE {                         #<-- ParM+ATP ("E" <=> End of polymer)
  # AtomID MolID AtomType  x   y   z
  write("Data Atoms") {
    $atom  $mol  @atom    0.0 0.0 0.0
  }
  write_once("Data Masses") {
    @atom 1.0
  }
  #       AtomType AtomType style epsilon sigma rcutoff
  write_once("In Settings") {
    pair_coeff @atom @atom  lj/cut  1.0   6.24  7.0 
  }
  # Note: 7.0 = filament width (nm)
}





DF {                         #<-- ParM+ADP ("F" <=> Free)
  # AtomID MolID AtomType  x   y   z
  write("Data Atoms") {
    $atom  $mol  @atom    0.0 0.0 0.0
  }
  write_once("Data Masses") {
    @atom 1.0
  }
  #       AtomType AtomType style epsilon sigma rcutoff
  write_once("In Settings") {
    pair_coeff @atom @atom  lj/cut  1.0   6.24  7.0 
  }
  # Note: 7.0 = filament width (nm)
}

DB {                          #<-- ParM+ADP ("B" <=> bound)
  # AtomID MolID AtomType  x   y   z
  write("Data Atoms") {
    $atom  $mol  @atom    0.0 0.0 0.0
  }
  write_once("Data Masses") {
    @atom 1.0
  }
  #       AtomType AtomType style epsilon sigma rcutoff
  write_once("In Settings") {
    pair_coeff @atom @atom  lj/cut  1.0   6.24  7.0 
  }
  # Note: 7.0 = filament width (nm)
}

DE {                         #<-- ParM+ADP ("E" <=> End of polymer)
  # AtomID MolID AtomType  x   y   z
  write("Data Atoms") {
    $atom  $mol  @atom    0.0 0.0 0.0
  }
  write_once("Data Masses") {
    @atom 1.0
  }
  #       AtomType AtomType style epsilon sigma rcutoff
  write_once("In Settings") {
    pair_coeff @atom @atom  lj/cut  1.0   6.24  7.0 
  }
  # Note: 7.0 = filament width (nm)
}


# The persistence length, (P), of ParM filaments is approximately 10um according
# to Gerdes++Jensen_MolMicrobiol2000 and Choi++Garner++DycheMullins_JBC2008.
# The bending harmonic constant k_a = (P/b)*kB*T ~= 851.66,
# where kB*T = 0.001987207*300kCal/mole
#   and Uangle(theta) = K*(theta-theta0)^2, and K = k_a/2
# and "b" is the size of each "monomer" (7nm in this particular model)


write_once("In Settings") { #style   K     r0
  bond_coeff  @bond:F    harmonic 100.0    7.0 #"filament"
  angle_coeff @angle:S   harmonic 851.66 180.0 #"filament" persistence=10um
}





# The following rules deterimine how the polymer grows and shrinks.  You must
# install the"Molecular Cellular Automata" LAMMPS code to run this simulation

write_once("system.in.transitions") {

  # Transition 1: Create a polymer (a dimer)
  fix tr1  all  bond/new     100       &
    @atom:TF  @atom:TF  7.1  @bond:F  prob 0.03 1234 &
    inew @atom:TE jnew @atom:TE   delay 1

  # NOTE: I intend to change the syntax of this command to the following
  #       so that it closely mimics the syntax of the fix bond/change command:
  #
  #fix tr1  all  bond/new     100   delay 1      &
  #    atoms @atom:TF  @atom:TF and
  #    distance <= 7.1  and prob 0.03 seed 1234 &
  # -> atoms @atom:TE  @atom:TE and bond @bond:F

  # Transition 2: Destabilize dimers (only trimers are stable)
  fix tr2  all  bond/change     100   delay 2     &
     atoms @atom:TE  @atom:TE and prob 0.8 seed 1234 &
  -> atoms @atom:TF  @atom:TF and bond BREAK

  # Transition 3: Attach monomers to the end of a polymer:
  fix tr3  all  bond/new     100       &
    @atom:TE  @atom:TF  7.1  @bond:F  atype @angle:S prob 0.04 1234 &
    inew @atom:TB jnew @atom:TE    delay 3

  # NOTE: I intend to change the syntax of this command to the following:
  #       so that it closely mimics the syntax of the fix bond/change command
  #fix tr3  all  bond/new     100   delay 3                  &
  #   atoms @atom:TE @atom:TF and distance <= 7.1 and prob 0.25 &
  #-> atoms @atom:TB @atom:TE and bond @bond:F and angle @angle:S * * *

  # Transitions 4 and 5: Hydrolize ATP  (ATP -> ADP)
  #  Here I am using fix "bond/change" to modify only one atom at a time.
  #  (In the future, I'll create a new fix with this functionality and
  #   name it "atom/change" instead of "bond/change")
  fix tr4  all  bond/change     100   delay 4         &
      atom @atom:TB and prob 0.00015 seed 1234 -> atom @atom:DB 
  
  fix tr5  all  bond/change     100   delay 5         &
      atom @atom:TE and prob 0.00015 seed 1234 -> atom @atom:DE

  # Transitions 6-8: Depolymerize ADP-bound ParM at the end
  fix tr6  all  bond/change     100   delay 6          &
      atoms @atom:DB @atom:DE and prob 0.02 seed 1234 &
   -> atoms @atom:DE @atom:DF and bond BREAK

  fix tr7  all  bond/change     100   delay 7          &
      atoms @atom:DE @atom:DE and prob 0.02 seed 1234 &
   -> atoms @atom:DF @atom:DF and bond BREAK

  # NOTE: WE DONT REALLY NEED THE NEXT 2 RULES ("tr8" and "tr9").  THESE RULES
  #       ARE EQUIVALENT TO "tr6" and "tr7".  THESE RULES ALLOW DEPOLYMERIZAITON
  #       TO PROCEED EVEN WHEN ITS PARTNER IS AN ATB BOUND ParM (not ADP bound).
  #       IF YOU OMIT THESE TWO RULES, THEN A SINGLE ADP-BOUND ParM WILL WAIT
  #       PATIENTLY UNTIL ITS PARTNER HYDROLYZES BEFORE DEPOLYMERIZING.  (This
  #       looks slightly odd, but it does not effect dynamic instability.)

  fix tr8  all  bond/change     100   delay 8          &
      atoms @atom:TB @atom:DE and prob 0.02 seed 1234 &
   -> atoms @atom:TE @atom:DF and bond BREAK
  
  fix tr9  all  bond/change     100   delay 9         &
     atoms @atom:TE  @atom:DE and prob 0.8 seed 1234 &
  -> atoms @atom:TF  @atom:DF and bond BREAK
  
  # Transition 10: Recycle ATP -> ADP (bound to ParM)
  #  Here I am using fix bond/change to modify only one atom at a time.
  #  (In the future, I'll create a new fix with this functionality and
  #   name it "atom/change" instead of "bond/change")
  fix tr10 all  "bond/change"     100   delay 10        &
      atom @atom:DF and prob 0.00008 -> atom @atom:TF  
}


# LAMMPS supports a large number of force-field styles. We must select
# which ones we need. This information belongs in the "In Init" section (and
# (you can specify it anywhere in your LT files, multiple times if you like).
# If different molecules use different force-field styles, you can use hybrid
# styles.  (In this example the molecules share the same pair_style.)

write_once("In Init") {
  units           lj
  atom_style      molecular
  pair_style      hybrid lj/cut 10.0
  bond_style      hybrid harmonic
  angle_style     hybrid harmonic
  pair_modify     mix arithmetic
  special_bonds   lj 1.0 1.0 1.0 # extra 100
}

